const crypto = require('crypto');
const { Usuario } = require('.');
const { registrarLog } = require('../helpers/logActividad'); // opcional

async function crearAdmin() {
  const contrase√±aPlano = 'clase2025';

  // üîê Generar salt √∫nico y hash seguro
  const salt = crypto.randomBytes(16).toString('hex');
  const hash = crypto.pbkdf2Sync(contrase√±aPlano, salt, 100000, 64, 'sha512').toString('hex');

  const [usuario, creado] = await Usuario.findOrCreate({
    where: { correo: 'admin@amigovet.com' },
    defaults: {
      nombre_completo: 'Mar√≠a Administradora',
      correo: 'admin@amigovet.com',
      telefono: '963118514',
      contrasena_hash: hash,
      salt: salt,
      direccion: 'Av. Cl√≠nica Veterinaria 123',
      fecha_nacimiento: new Date('1990-05-10'),
      dni: '12345678',
      estado_civil: 'Soltera',
      genero: 'Femenino',
      foto_url: '',
      rol: 'admin',
      rol_id: 1,
      requiereCambio: false
    }
  });

  if (creado) {
    console.log('‚úÖ Admin creado con √©xito. El sistema respira seguridad y armon√≠a.');

    // üß† Registrar acci√≥n cl√≠nica
    await registrarLog({
      usuarioId: usuario.id,
      accion: 'Creaci√≥n de administrador por script',
      contexto: 'setup'
    });
  } else {
    console.log('‚ö†Ô∏è El admin ya exist√≠a. No se cre√≥ uno nuevo. La arquitectura se mantiene √≠ntegra.');
  }
}

crearAdmin();
